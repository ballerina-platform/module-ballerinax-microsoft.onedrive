// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://graph.microsoft.com/v1.0/") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get entities from drives
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved collection 
    remote isolated function listDrive(map<string|string[]> headers = {}, *ListDriveQueries queries) returns microsoft\.graph\.driveCollectionResponse|error {
        string resourcePath = string `/drives`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add new entity to drives
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createDrive(microsoft\.graph\.drive payload, map<string|string[]> headers = {}) returns microsoft\.graph\.drive|error {
        string resourcePath = string `/drives`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get entity from drives by key
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getDrive(string drive\-id, map<string|string[]> headers = {}, *GetDriveQueries queries) returns microsoft\.graph\.drive|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete entity from drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteDrive(string drive\-id, DeleteDriveHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update entity in drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function updateDrive(string drive\-id, microsoft\.graph\.drive payload, map<string|string[]> headers = {}) returns microsoft\.graph\.drive|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # drive: sharedWithMe
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved collection 
    remote isolated function listItem(string drive\-id, map<string|string[]> headers = {}, *ListItemQueries queries) returns microsoft\.graph\.driveItemCollectionResponse|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create new navigation property to items for drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property 
    # + return - Created navigation property. 
    remote isolated function createItem(string drive\-id, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get items from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved navigation property 
    remote isolated function getItem(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *GetItemQueries queries) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete navigation property items for drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteItem(string drive\-id, string driveItem\-id, DeleteItemHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update the navigation property items in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property values 
    # + return - Success 
    remote isolated function updateItem(string drive\-id, string driveItem\-id, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # List children of a driveItem
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved collection 
    remote isolated function listChildren(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *ListChildrenQueries queries) returns microsoft\.graph\.driveItemCollectionResponse|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create new navigation property to children for drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property 
    # + return - Created navigation property. 
    remote isolated function createChildren(string drive\-id, string driveItem\-id, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + driveItem\-id1 - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved navigation property 
    remote isolated function getChildren(string drive\-id, string driveItem\-id, string driveItem\-id1, map<string|string[]> headers = {}, *GetChildrenQueries queries) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children/${getEncodedUri(driveItem\-id1)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get content for the navigation property children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + driveItem\-id1 - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved media content 
    remote isolated function getChildrenContent(string drive\-id, string driveItem\-id, string driveItem\-id1, map<string|string[]> headers = {}, *GetChildrenContentQueries queries) returns byte[]|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children/${getEncodedUri(driveItem\-id1)}/content`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + driveItem\-id1 - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - New media content. 
    # + return - Success 
    remote isolated function setChildrenContent(string drive\-id, string driveItem\-id, string driveItem\-id1, byte[] payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children/${getEncodedUri(driveItem\-id1)}/content`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + driveItem\-id1 - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteChildrenContent(string drive\-id, string driveItem\-id, string driveItem\-id1, DeleteChildrenContentHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children/${getEncodedUri(driveItem\-id1)}/content`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get the number of the resource
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - The count of the resource 
    remote isolated function getChildrenCount(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *GetChildrenCountQueries queries) returns string|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/children/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get content for the navigation property items from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved media content 
    remote isolated function getItemsContent(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *GetItemsContentQueries queries) returns byte[]|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/content`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update content for the navigation property items in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - New media content. 
    # + return - Success 
    remote isolated function setItemsContent(string drive\-id, string driveItem\-id, byte[] payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/content`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete content for the navigation property items in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteItemsContent(string drive\-id, string driveItem\-id, DeleteItemsContentHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/content`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Invoke action assignSensitivityLabel
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function assignSentitivityLabel(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_assignSensitivityLabel_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.assignSensitivityLabel`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action checkin
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function checkin(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_checkin_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.checkin`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action checkout
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function checkout(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.checkout`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action copy
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function copy(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_copy_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.copy`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action createLink
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function createLink(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_createLink_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.permission|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.createLink`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action createUploadSession
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function createUploadSession(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_createUploadSession_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.uploadSession|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.createUploadSession`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action discardCheckout
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function discardCheckout(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.discardCheckout`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action extractSensitivityLabels
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function extractSensitivityLabel(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns microsoft\.graph\.extractSensitivityLabelsResult|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.extractSensitivityLabels`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action follow
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function follow(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.follow`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action invite
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function invite(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_invite_body payload, map<string|string[]> headers = {}) returns Collection\ of\ permission|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.invite`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action permanentDelete
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function permanentDelete(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.permanentDelete`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action preview
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function preview(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_preview_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.itemPreviewInfo|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.preview`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action restore
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function restore(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_restore_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.restore`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke function search
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + q - Usage: q='{q}'
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function search(string drive\-id, string driveItem\-id, string? q, map<string|string[]> headers = {}, *SearchQueries queries) returns Collection\ of\ driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.search(q='${getEncodedUri(q)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke action unfollow
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function unfollow(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.unfollow`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action validatePermission
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function validatePermission(string drive\-id, string driveItem\-id, driveItemid_microsoft_graph_validatePermission_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/${getEncodedUri(driveItem\-id)}/microsoft.graph.validatePermission`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get the number of the resource
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - The count of the resource 
    remote isolated function getItemCount(string drive\-id, map<string|string[]> headers = {}, *GetItemCountQueries queries) returns string|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/items/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke function recent
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function recent(string drive\-id, map<string|string[]> headers = {}, *RecentQueries queries) returns Collection\ of\ driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/microsoft.graph.recent()`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke function search
    #
    # + drive\-id - The unique identifier of drive
    # + q - Usage: q='{q}'
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function searchWithinDriveItem(string drive\-id, string? q, map<string|string[]> headers = {}, *SearchWithinDriveItemQueries queries) returns Collection\ of\ driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/microsoft.graph.search(q='${getEncodedUri(q)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke function sharedWithMe
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function sharedWithMe(string drive\-id, map<string|string[]> headers = {}, *SharedWithMeQueries queries) returns Collection\ of\ driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/microsoft.graph.sharedWithMe()`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get root from drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved navigation property 
    remote isolated function getRoot(string drive\-id, map<string|string[]> headers = {}, *GetRootQueries queries) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete navigation property root for drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRoot(string drive\-id, DeleteRootHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update the navigation property root in drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property values 
    # + return - Success 
    remote isolated function updateRoot(string drive\-id, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Get root from drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved navigation property 
    remote isolated function getItemByPath(string drive\-id, string path\-to\-item, map<string|string[]> headers = {}, *GetItemByPathQueries queries) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete navigation property root for drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteItemByPath(string drive\-id, string path\-to\-item, DeleteItemByPathHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update the navigation property root in drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property values 
    # + return - Success 
    remote isolated function updateItemByPath(string drive\-id, string path\-to\-item, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Get children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved collection 
    remote isolated function listChildrenInRoot(string drive\-id, map<string|string[]> headers = {}, *ListChildrenInRootQueries queries) returns microsoft\.graph\.driveItemCollectionResponse|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create new navigation property to children for drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property 
    # + return - Created navigation property. 
    remote isolated function createChildrenInRoot(string drive\-id, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-folder - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved collection 
    remote isolated function listItemsByPath(string drive\-id, string path\-to\-folder, map<string|string[]> headers = {}, *ListItemsByPathQueries queries) returns microsoft\.graph\.driveItemCollectionResponse|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-folder)}:/children`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create new navigation property to children for drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-folder - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + payload - New navigation property 
    # + return - Created navigation property. 
    remote isolated function createItemByPath(string drive\-id, string path\-to\-folder, microsoft\.graph\.driveItem payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-folder)}:/children`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get content for the navigation property children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved media content 
    remote isolated function getChildrenContentByPath(string drive\-id, string path\-to\-item, map<string|string[]> headers = {}, *GetChildrenContentByPathQueries queries) returns byte[]|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}:/content`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + payload - New media content. 
    # + return - Success 
    remote isolated function setChildrenContentByPath(string drive\-id, string path\-to\-item, byte[] payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}:/content`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteChildrenContentByPath(string drive\-id, string path\-to\-item, DeleteChildrenContentByPathHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}:/content`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved navigation property 
    remote isolated function getChildrenInRoot(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *GetChildrenInRootQueries queries) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children/${getEncodedUri(driveItem\-id)}`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get content for the navigation property children from drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved media content 
    remote isolated function getChildrenContentInRoot(string drive\-id, string driveItem\-id, map<string|string[]> headers = {}, *GetChildrenContentInRootQueries queries) returns byte[]|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children/${getEncodedUri(driveItem\-id)}/content`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + payload - New media content. 
    # + return - Success 
    remote isolated function setChildrenContentInRoot(string drive\-id, string driveItem\-id, byte[] payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children/${getEncodedUri(driveItem\-id)}/content`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete content for the navigation property children in drives
    #
    # + drive\-id - The unique identifier of drive
    # + driveItem\-id - The unique identifier of driveItem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteChildrenContentInRoot(string drive\-id, string driveItem\-id, DeleteChildrenContentInRootHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children/${getEncodedUri(driveItem\-id)}/content`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Get the number of the resource
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - The count of the resource 
    remote isolated function getChildrenCountInRoot(string drive\-id, map<string|string[]> headers = {}, *GetChildrenCountInRootQueries queries) returns string|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/children/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get content for the navigation property root from drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved media content 
    remote isolated function getRootContent(string drive\-id, map<string|string[]> headers = {}, *GetRootContentQueries queries) returns byte[]|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/content`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update content for the navigation property root in drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - New media content. 
    # + return - Success 
    remote isolated function setRootContent(string drive\-id, byte[] payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/content`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete content for the navigation property root in drives
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteRootContent(string drive\-id, DeleteRootContentHeaders headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/content`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Invoke action assignSensitivityLabel
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function assignSentitivityLabelInRoot(string drive\-id, root_microsoft_graph_assignSensitivityLabel_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.assignSensitivityLabel`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action checkin
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function checkinInRoot(string drive\-id, root_microsoft_graph_checkin_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.checkin`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action checkout
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function checkoutInRoot(string drive\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.checkout`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action copy
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function copyInRoot(string drive\-id, root_microsoft_graph_copy_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.copy`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action copy
    #
    # + drive\-id - The unique identifier of drive
    # + path\-to\-item - Path relative to root folder
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function copyByPath(string drive\-id, string path\-to\-item, rootpathtoitem_microsoft_graph_copy_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root:${getEncodedUri(path\-to\-item)}:/microsoft.graph.copy`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action createLink
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function createLinkInRoot(string drive\-id, root_microsoft_graph_createLink_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.permission|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.createLink`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action createUploadSession
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function createUploadSessionInRoot(string drive\-id, root_microsoft_graph_createUploadSession_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.uploadSession|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.createUploadSession`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action discardCheckout
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function discardCheckoutInRoot(string drive\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.discardCheckout`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action extractSensitivityLabels
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function extractSensitivityLabelsInRoot(string drive\-id, map<string|string[]> headers = {}) returns microsoft\.graph\.extractSensitivityLabelsResult|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.extractSensitivityLabels`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action follow
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function followInRoot(string drive\-id, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.follow`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action invite
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function inviteInRoot(string drive\-id, root_microsoft_graph_invite_body payload, map<string|string[]> headers = {}) returns Collection\ of\ permission|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.invite`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action permanentDelete
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function permanentDeleteInRoot(string drive\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.permanentDelete`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action preview
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function previewInRoot(string drive\-id, root_microsoft_graph_preview_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.itemPreviewInfo|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.preview`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action restore
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function restoreInRoot(string drive\-id, root_microsoft_graph_restore_body payload, map<string|string[]> headers = {}) returns microsoft\.graph\.driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.restore`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke function search
    #
    # + drive\-id - The unique identifier of drive
    # + q - Usage: q='{q}'
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function searchInRoot(string drive\-id, string? q, map<string|string[]> headers = {}, *SearchInRootQueries queries) returns Collection\ of\ driveItem|error {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.search(q='${getEncodedUri(q)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$orderby": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke action unfollow
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function unfollowInRoot(string drive\-id, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.unfollow`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action validatePermission
    #
    # + drive\-id - The unique identifier of drive
    # + headers - Headers to be sent with the request 
    # + payload - Action parameters 
    # + return - Success 
    remote isolated function validatePermissionInRoot(string drive\-id, root_microsoft_graph_validatePermission_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/drives/${getEncodedUri(drive\-id)}/root/microsoft.graph.validatePermission`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
